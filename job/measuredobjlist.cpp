#include "measuredobjlist.hpp"

using namespace std;
using namespace Job;
using namespace SSDK;

//>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//构造 &析构函数
MeasuredObjList::MeasuredObjList()
{
    this->m_size = 0;
    this->m_pHeadObj = nullptr;
}

MeasuredObjList::~MeasuredObjList()
{
    //定义一个MeasureObj对象,记录链表节点的地址
    MeasuredObj * pTmpObj = nullptr;

    //如果表头指针不为nullPtr,则依次释放所有链表的节点
    while (this->m_pHeadObj != nullptr)
    {
        //将链表中下一个节点的地址赋值给对象
        pTmpObj = this->m_pHeadObj->getNextMeasuredObjPtr();

        //删除链表的头地址
        delete(this->m_pHeadObj);

        //如果链表中下一个节点的地址不是nullptr,即不是最后一个节点
        //将链表中指向上一个节点的地址置为nullptr
        if(pTmpObj != nullptr)
        {
            pTmpObj->setPreMeasuredObjPtr(nullptr);
        }
        //将指向下一个节点的地址赋值给表头
        this->m_pHeadObj = pTmpObj;
    }
}

//<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//创建链表,增加,删除节点
void MeasuredObjList::createLinkedList(int size)
{
    try
    {
        //初始化随机数种子,随机生成元件的X,Y坐标角度及长和宽
        srand((unsigned)time(NULL));

        std::string namePrefix;             //元件名的前缀
        std::string nameIndex;              //元件名字的索引号
        std::string name;                   //元件名
        FormatConvertion formatConvertion;  //实例化一个对象,将元件索引号转换为字符串

        //获取链表的大小
        this->m_size = size;
        //创建两个MeasuredObj指针对象 pTailObj (为指向链表尾部节点的指针),将其置为nullptr
        //将 pNewObj(为指向链表新建节点的指针),将其置为nullptr
        MeasuredObj * pTailObj = nullptr;
        MeasuredObj * pNewObj = nullptr;

        //根据参数,开辟指定大小的链表
        for (int i = 0; i < this->m_size ; ++i)
        {
            //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            //step1
            //新增一个Measure对象
            pNewObj = new (MeasuredObj);

            //判断内存是否开辟成功,如果失败,则抛出异常
            if(nullptr == pNewObj)
            {
                THROW_EXCEPTION("内存分配失败!");
            }
            //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

            //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            //step2
            //将新增的成员变量赋值
            //设置新增节点的X,Y轴坐标,角度,及长和宽
            pNewObj->setRandomRectangle();

            if(i < 20)
            {
                namePrefix = "chip";
                nameIndex = formatConvertion.intToString(i+1);
                name = namePrefix + nameIndex;
            }
            else
            {
                namePrefix = "ic";
                nameIndex = formatConvertion.intToString(i - 19);
                name = namePrefix + nameIndex;
            }

            //设置新增节点元件名称
            pNewObj->setName(name);
            //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

            //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            //step3
            //设置链表当前节点的成员变量(即上一个节点地址及下一个节点的地址)
            //step3.1
            //判断链表新增节点是否为第一个节点,如果不是则有以下4步操作
            //1.将新增加的对象中的成员变量,指向下一个链表节点的指针置为nullptr
            //2.将新增加的对象中的成员变量,指向上一个链表节点的指针指向链表的尾部
            //3.将原来链表尾部中的成员变量指向下一个链表节点的指针指向当前新增的节点
            //4.将新增的对象赋值给链表尾部对象
            if(0 != i )
            {
                 pNewObj->setNextMeasuredObjPtr(nullptr);
                 pNewObj->setPreMeasuredObjPtr(pTailObj);
                 pTailObj->setNextMeasuredObjPtr(pNewObj);
                 pTailObj = pNewObj;
            }
            //step3.2
            //如果新增的节点为链表中第一个节点,则有如下步骤
            //1.将新增对象的指针赋值给成员变量 m_pHeadObj(即链表第一个节点的地址)
            //2.将链表的第一个节点中指向下一个节点的指针置为nullptr
            //3.将链表的第一个节点中指向上一个节点的指针置为nullptr
            //4.将指向链表第一个节点的指针赋值给指向链表尾部节点的指针
            else
            {
                this->m_pHeadObj= pNewObj;
                this->m_pHeadObj->setNextMeasuredObjPtr(nullptr);
                this->m_pHeadObj->setPreMeasuredObjPtr(nullptr);
                pTailObj = this->m_pHeadObj;
            }
            //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        }
    }
    catch(const exception &ex)
    {
        THROW_EXCEPTION(ex.what());
    }
}

void MeasuredObjList::pushHead(MeasuredObj measuredObj)
{
    try
    {
        //定义两个 MeasuredObj指针对象
        //pNewObj:为指向链表新创建节点的指针,将其置为nullptr
        //pTmpObj:为临时记录链表节点地址的指针,将其默认设为链表的头指针
        MeasuredObj * pNewObj = nullptr;
        MeasuredObj * pTmpObj = this->m_pHeadObj;

        //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //step1
        //新建一个新MeasuredObj对象的
        pNewObj = new (MeasuredObj);

        if(nullptr == pNewObj)
        {
            THROW_EXCEPTION("内存开辟失败!");
        }

        //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

        //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //step2
        //将参数中的对象赋值给新建的对象
        *pNewObj = measuredObj;

        //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

        //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //step3
        //3.1将链表的头指针指向新创建的对象
        this->m_pHeadObj = pNewObj;
        //3.2将链表表头的成员变量(指向下一个节点的指针)指向原来链表头部
        this->m_pHeadObj->setNextMeasuredObjPtr(pTmpObj);
        //3.3将链表表头的成员变量(指向上一个节点的指针)设置为nullptr
        this->m_pHeadObj->setPreMeasuredObjPtr(nullptr);
        //3.4将原来链表表头的成员变量(指向上一个节点的指针)指向新创建的指针
        pTmpObj->setPreMeasuredObjPtr(pNewObj);

        //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

        //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //step4
        //将链表的长度 +1
        this->m_size++;
        //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    }
    catch(const exception &ex)
    {
        THROW_EXCEPTION(ex.what());
    }
}

void MeasuredObjList::pushTail(MeasuredObj measuredObj)
{
    try
    {
        //定义三个 MeasuredObj指针对象
        //pNewObj:为指向链表新创建节点的指针,将其置为nullptr
        //pTailObj:为记录链表尾部节点的指针,默认设置为nullptr
        //pTmpObj:为临时记录链表节点地址的指针,将其默认设为链表的头指针
        MeasuredObj * pNewObj = nullptr;
        MeasuredObj * pTailObj = this->m_pHeadObj;
        MeasuredObj * pTmpObj = this->m_pHeadObj->getNextMeasuredObjPtr();

        //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //step1
        //新建一个新MeasuredObj对象的
        pNewObj = new (MeasuredObj);

        if(nullptr == pNewObj)
        {
            THROW_EXCEPTION("内存开辟失败!");
        }
        //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

        //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //step2
        //将参数中的对象赋值给新建的对象
        *pNewObj = measuredObj;
        //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

        //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //step3
        //3.1找出链表中最后一个节点
        while (pTmpObj != nullptr)
        {
            pTailObj = pTmpObj;
            pTmpObj = pTmpObj->getNextMeasuredObjPtr();
        }
        //3.2将新创建对象中成员变量(指向下一个节点的指针)设置为nullptr
        pNewObj->setNextMeasuredObjPtr(nullptr);
        //3.3将新创建对象中成员变量(指向上一个节点的指针)指向原来链表的尾部
        pNewObj->setPreMeasuredObjPtr(pTailObj);
        //3.4将原来链表尾部节点中成员变量(指向下一个节点的指针)指向新建的节点
        pTailObj->setNextMeasuredObjPtr(pNewObj);

        //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

        //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //step4
        //将链表的长度 +1
        this->m_size++;
        //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        }
    catch(const exception &ex)
    {
        THROW_EXCEPTION(ex.what());
    }
}

void MeasuredObjList::pullHead()
{
    try
    {
        //判断链表的长度,如果链表长度大于0,则执行删除节点操作
        //如果链表长度为0,则抛出异常
        if(this->m_size > 0)
        {
            //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            //step1
            //定义一个MeasureObj对象,记录链表节点的地址
            MeasuredObj *pTmpObj = nullptr;
            //将链表中第二个节点的地址赋值给临时对象
            pTmpObj = this->m_pHeadObj->getNextMeasuredObjPtr();

            //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

            //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            //step2
            //2.1删除链表的头
            delete(this->m_pHeadObj);

            //2.2如果链表中下一个节点的地址不是nullptr,即不是最后一个节点
            //   将链表中第二个节点中成员变量(指向上一个节点的地址)置为nullptr
            if(pTmpObj != nullptr)
            {
                pTmpObj->setPreMeasuredObjPtr(nullptr);
            }
            //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

            //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            //step3
            //重新设置表头的地址
            this->m_pHeadObj = pTmpObj;
            //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

            //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            //step4
            //将链表中的长度减一
            this->m_size--;
            //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        }
        else
        {
            THROW_EXCEPTION("链表长度为0,无法删除节点!");
        }
    }
    catch(const exception &ex)
    {
        THROW_EXCEPTION(ex.what());
    }
}

void MeasuredObjList::pullTail()
{
    //判断链表的长度,如果链表长度大于0,则执行删除节点操作
    //如果链表长度为0,则抛出异常
    if(this->m_size > 0)
    {
        //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //step1
        //找出链表中最后一个节点
        MeasuredObj * pTailObj = this->m_pHeadObj;
        MeasuredObj * pTmpObj = this->m_pHeadObj->getNextMeasuredObjPtr();

        while (pTmpObj != nullptr)
        {
            pTailObj = pTmpObj;
            pTmpObj = pTmpObj->getNextMeasuredObjPtr();
        }
        //记录下链表中倒数第二个节点
        pTmpObj = pTailObj->getPreMeasuredObjPtr();
        //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

        //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //step2
        //删除链表的最后一个节点
        delete(pTailObj);

        //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

        //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //step3
        //如果链表尾部上一个节点的地址不是nullptr,即不是第一个节点
        //将链表中指向上一个节点的地址置为nullptr
        //否则将链表的表头指针设置为nullpte
        if(pTmpObj != nullptr)
        {
            //将倒数第二个节点中的成员变量(指向下一个节点的指针),将其设置为nullptr
            pTmpObj->setNextMeasuredObjPtr(nullptr);
        }
        else
        {
           m_pHeadObj = nullptr;
        }
        //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

        //>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        //step4
        //将链表的长度减一
        this->m_size--;
        //<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    }
    else
    {
        THROW_EXCEPTION("链表长度为0,无法删除节点!");
    }
}

//<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//访存函数 获取 & 设置链表的长度
int MeasuredObjList::getSize()
{
    //返回链表节点的个数
    return this->m_size;
}

void MeasuredObjList::setSize(int size)
{
    this->m_size = size;
}

//<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//>>>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//显示链表中所有节点的元件名称,X,Y轴坐标,角度,及长和宽
void MeasuredObjList::print()
{
    MeasuredObj *pTmpObj = this->m_pHeadObj;

    while (pTmpObj != nullptr)
    {
        cout<<"元件名称:"<<pTmpObj->getName()<<"\t"
            <<"X:"<< pTmpObj->getRectangle().getX()<<"\t"
            <<"Y:"<<pTmpObj->getRectangle().getY()<<"\t"
            <<"Angle:"<<pTmpObj->getRectangle().getAngle()<<"\t"
            <<"Width:"<<pTmpObj->getRectangle().getWidth()<<"\t"
            <<"Height"<<pTmpObj->getRectangle().getHeight()<<endl;
        pTmpObj = pTmpObj->getNextMeasuredObjPtr();
    }
}
//<<<----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



